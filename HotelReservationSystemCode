import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Room class
class Room {
    private String type;
    private double price;
    private boolean isAvailable;

    public Room(String type, double price) {
        this.type = type;
        this.price = price;
        this.isAvailable = true;
    }

    // Getters and setters
    public String getType() {
        return type;
    }

    public double getPrice() {
        return price;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void reserve() {
        isAvailable = false;
    }

    public void release() {
        isAvailable = true;
    }
}

// Reservation class
class Reservation {
    private Room room;
    private String customerName;

    public Reservation(Room room, String customerName) {
        this.room = room;
        this.customerName = customerName;
    }

    // Getters
    public Room getRoom() {
        return room;
    }

    public String getCustomerName() {
        return customerName;
    }
}

// Hotel class
class Hotel {
    private List<Room> rooms;
    private List<Reservation> reservations;

    public Hotel() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
    }

    // Add room
    public void addRoom(Room room) {
        rooms.add(room);
    }

    // Search available rooms
    public List<Room> searchAvailableRooms() {
        List<Room> availableRooms = new ArrayList<>();
        for (Room room : rooms) {
            if (room.isAvailable()) {
                availableRooms.add(room);
            }
        }
        return availableRooms;
    }

    // Make reservation
    public Reservation makeReservation(String customerName, Room room) {
        if (room.isAvailable()) {
            room.reserve();
            Reservation reservation = new Reservation(room, customerName);
            reservations.add(reservation);
            return reservation;
        }
        return null;
    }

    // View reservations
    public void viewReservations() {
        for (Reservation reservation : reservations) {
            System.out.println("Customer: " + reservation.getCustomerName() +
                    ", Room Type: " + reservation.getRoom().getType() +
                    ", Price: " + reservation.getRoom().getPrice());
        }
    }
}

// Main class
class Main {
    public static void main(String[] args) {
        Hotel hotel = new Hotel();
        hotel.addRoom(new Room("Single", 1000.0));
        hotel.addRoom(new Room("Double", 1500.0));
        hotel.addRoom(new Room("Suite", 2500.0));

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Hotel Reservation System");
            System.out.println("1. Search Available Rooms");
            System.out.println("2. Make Reservation");
            System.out.println("3. View Reservations");
            System.out.println("4. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            switch (choice) {
                case 1:
                    List<Room> availableRooms = hotel.searchAvailableRooms();
                    if (availableRooms.isEmpty()) {
                        System.out.println("No rooms available.");
                    } else {
                        System.out.println("Available Rooms:");
                        for (Room room : availableRooms) {
                            System.out.println("Room Type: " + room.getType() + ", Price: " + room.getPrice());
                        }
                    }
                    break;
                case 2:
                    System.out.print("Enter your name: ");
                    String name = scanner.nextLine();

                    System.out.print("Enter room type: ");
                    String roomType = scanner.nextLine();

                    Room selectedRoom = null;
                    for (Room room : hotel.searchAvailableRooms()) {
                        if (room.getType().equalsIgnoreCase(roomType)) {
                            selectedRoom = room;
                            break;
                        }
                    }

                    if (selectedRoom != null) {
                        Reservation reservation = hotel.makeReservation(name, selectedRoom);
                        if (reservation != null) {
                            System.out.println("Reservation made for " + name + " in a " + selectedRoom.getType() + " room.");
                        } else {
                            System.out.println("Failed to make reservation.");
                        }
                    } else {
                        System.out.println("Room not available.");
                    }
                    break;
                case 3:
                    hotel.viewReservations();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
